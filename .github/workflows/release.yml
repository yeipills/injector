name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build_and_release:
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

    - name: Restore dependencies
      run: dotnet restore injector\injector.csproj

    - name: Publish x64 (Self-contained, Single-file)
      run: |
        dotnet publish injector\injector.csproj `
          --configuration Release `
          --runtime win-x64 `
          --self-contained true `
          --output ./publish-x64 `
          -p:PublishSingleFile=true `
          -p:IncludeNativeLibrariesForSelfExtract=true `
          -p:PublishReadyToRun=true `
          -p:PublishTrimmed=false

    - name: Publish x86 (Self-contained, Single-file)
      run: |
        dotnet publish injector\injector.csproj `
          --configuration Release `
          --runtime win-x86 `
          --self-contained true `
          --output ./publish-x86 `
          -p:PublishSingleFile=true `
          -p:IncludeNativeLibrariesForSelfExtract=true `
          -p:PublishReadyToRun=true `
          -p:PublishTrimmed=false

    - name: Archive x64 build
      run: Compress-Archive -Path ./publish-x64/injector.exe -DestinationPath ./injector-x64.zip

    - name: Archive x86 build
      run: Compress-Archive -Path ./publish-x86/injector.exe -DestinationPath ./injector-x86.zip

    - name: Get version from tag
      id: get_version
      run: |
        if ("${{ github.ref }}" -match "refs/tags/(.*)") {
          $version = $matches[1]
        } else {
          $version = "dev-build"
        }
        echo "version=$version" >> $env:GITHUB_OUTPUT
      shell: pwsh

    - name: Create Release and Upload Assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./injector-x64.zip
          ./injector-x86.zip
        tag_name: ${{ steps.get_version.outputs.version }}
        name: Release ${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: false
        body: |
          ## DLL Injector - ${{ steps.get_version.outputs.version }}

          Professional and secure DLL injection tool for Windows.

          ### ðŸŽ¯ Standalone Builds - No .NET Installation Required!

          This release includes **self-contained, single-file executables** that do NOT require .NET Runtime to be installed.

          **Download the version for your system:**
          - `injector-x64.zip` - For 64-bit Windows (most common)
          - `injector-x86.zip` - For 32-bit Windows (legacy systems)

          ### âœ¨ Features
          - Process enumeration and selection
          - Safe DLL injection with comprehensive validation
          - Automatic architecture matching (32-bit/64-bit)
          - PE file validation for security
          - Comprehensive error handling with detailed messages
          - Modern WPF interface

          ### ðŸ“‹ Requirements
          - **Operating System**: Windows 7 or later
          - **Permissions**: Administrator privileges
          - **No .NET installation needed** - Everything is bundled!

          ### ðŸš€ Quick Start
          1. Download the appropriate ZIP file for your system (x64 or x86)
          2. Extract `injector.exe` to any location
          3. Right-click and "Run as Administrator"
          4. Select a process, choose your DLL, and inject!

          ### ðŸ“– Documentation
          See [README.md](https://github.com/yeipills/injector/blob/master/README.md) for detailed documentation.

          ### ðŸ“¦ Build Info
          - Build Type: Self-contained, Single-file
          - Runtime: Embedded .NET 6.0
          - Compilation: ReadyToRun (R2R) optimized
          - Architecture: x64 and x86 builds included
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
